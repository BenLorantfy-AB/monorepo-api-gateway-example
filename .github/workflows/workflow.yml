# This workflow deploys the services within the monorepo.  It does this in two main "steps"
# Step 1: Deploy the openspec file to API gateway
# Step 2: Deploy the service itself to the infrastructure
#
# By treating api gateway as just another step in the deploy process, it keeps
# the workflow simple and streamlined
name: Deploy

on: push

jobs:
  deploy:
    name: Deploy services
    strategy:
      matrix:
        serviceName: ['jokes-service','color-service']
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      # Detects if any files in the service were changed
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            files:
              - 'services/${{ matrix.serviceName }}/**'

      # Sets up yarn caching
      - uses: actions/setup-node@v3
        if: steps.changes.outputs.files == 'true'
        with:
          node-version: 16
          cache: 'yarn'

      # Sets up the AWS cli, which is needed for deploying to API gateway
      - name: Configure AWS Credentials
        if: steps.changes.outputs.files == 'true'
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      # Deploys to both API gateway and EC2
      - name: Deploy
        if: steps.changes.outputs.files == 'true'
        run: |      
          echo "================"
          echo "Building service"
          echo "================"
          echo "Moving yarn.lock to service"
          mv yarn.lock services/${{ matrix.serviceName }}
          rm package.json

          cd ./services/${{ matrix.serviceName }}
          echo "Installing deps"
          yarn
          echo "Building service"
          yarn build

          echo "========================"
          echo "Deploying to API Gateway"
          echo "========================"

          # First, we try to get the API ID from the service name.  This is
          # needed for 2 reasons:
          #   1. We need to use import-api if it's a new API and reimport-api if it's an old API.
          #     If the API is null, that means it's a new API and we need to use the import-api command
          #   2. When re-importing, you need to pass the API ID.  It does not work with the service name
          #
          # Alternatively, we could maintain a configuration that mapped service
          # names to api IDs, but we avoid that maintenance cost with the below
          # approach
          echo "Trying to get api ID from service name..."
          api_id=$(aws apigatewayv2 get-apis --query "Items[?@.Name=='${{ matrix.serviceName }}'].ApiId" | jq ".[0]" --raw-output)
          echo "API ID is $api_id"

          echo "Generating openapi spec file..."
          node ./dist/generateDocs.js http://3.134.98.61 > api-definition.json

          echo "Uploading to api gateway..."
          if [ $api_id == "null" ]; then
            echo "API does not exist yet so creating new API in API gateway..."
            aws apigatewayv2 import-api --body file://./api-definition.json
          else
            echo "API already exists, re-importing..."
            aws apigatewayv2 reimport-api --body file://./api-definition.json --api-id $api_id
          fi
          rm api-definition.json

          echo "========================"
          echo "Deploying service to EC2"
          echo "========================"
          echo "Setting up SSH key"
          mkdir ~/.ssh
          touch ~/.ssh/id_rsa
          echo ${{ secrets.SSH_PRIVATE_KEY_BASE64 }} | base64 --decode > ~/.ssh/id_rsa
          sudo chmod 600 ~/.ssh/id_rsa

          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa

          echo "Copying files to remote"
          rm -rf node_modules
          rm -rf src
          rm -rf test
          rsync -e "ssh -o StrictHostKeyChecking=no" -a . ubuntu@3.134.98.61:${{ matrix.serviceName }}

          echo "Installing deps on remote"
          ssh -o StrictHostKeyChecking=no ubuntu@3.134.98.61 "cd ${{ matrix.serviceName }} && ~/.npm-global/bin/yarn"

          echo "Restarting service"
          ssh -o StrictHostKeyChecking=no ubuntu@3.134.98.61 "cd ${{ matrix.serviceName }} && ~/.npm-global/bin/pm2 start dist/main.js --name ${{ matrix.serviceName }}" || true # Allow to fail incase it's already started
          ssh -o StrictHostKeyChecking=no ubuntu@3.134.98.61 "~/.npm-global/bin/pm2 restart ${{ matrix.serviceName }}"
